#!/usr/bin/perl -w

# Author: Jan Tomášek <jan.tomasek@cesnet.cz>, <jan@tomasek.cz>
# Copyright (c) 2006-2018 CESNET, z.s.p.o.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# Plugin config:
#
#[radiator]
#env.SNMP_SERVER         127.0.0.1
#env.SNMP_COMUNITY       ro_comunity

use strict;
use Net::SNMP;
use Data::Dumper;

my $objects =
  {
   radiusAuthServTotalAccessAccepts           => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.8',
						  desc => "Access Accepts",
						  mode => "low",
						 },
   radiusAuthServTotalAccessRejects           => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.9',
						  desc => "Access Rejects",
						  mode => "low",
						 },
   radiusAuthServTotalAccessRequests          => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.5',
						  desc => "Access Requests",
						  mode => "high",
						 },
   radiusAuthServTotalAccessChallenges        => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.10',
						  desc => "Access Challenges",
						  mode => "high",
						 },
   radiusAuthServTotalUnknownTypes            => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.14',
						  desc => "Unknown Type Packets",
						  mode => "low",
						 },
   radiusAuthServTotalInvalidRequests         => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.6',
						  desc => "Invalid Requests",
						  mode => "low",
						 },
   radiusAuthServTotalMalformedAccessRequests => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.11',
						  desc => "Malformed Access Requests",
						  mode => "low",
						 },
   radiusAuthServTotalDupAccessRequests       => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.7',
						  desc => "Duplicated Access Requests",
						  mode => "low",
						 },
   radiusAuthServTotalPacketsDropped          => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.13',
						  desc => "Dropped Packets",
						  mode => "low",
						 },
   radiusAuthServTotalBadAuthenticators       => {
						  mib => 'SNMPv2-SMI::mib-2.67.1.1.1.1.12',
						  desc => "Bad Authenticators",
						  mode => "low",
						 },
  };

my $exec_mode = 'default';
my $graph_title = 'RADIUS traffic';
if ($0 =~ /_high$/) {
  $graph_title = 'RADIUS traffic (high)';
  $exec_mode = 'high';
} elsif ($0 =~ /_low$/) {
  $graph_title = 'RADIUS traffic (low)';
  $exec_mode = 'low'
};

my $mode = '';
$mode = 'config' if (defined($ARGV[0]) and ($ARGV[0] eq 'config'));

my $server = $ENV{SNMP_SERVER} or die "SNMP_SERVER is not defined";
my $comunity = $ENV{SNMP_COMUNITY} or die "SNMP_COMUNITY is not defined";

if ($mode eq 'config') {
  print "graph_title $graph_title
graph_vlabel Count
graph_category radius\n";
  foreach my $object (keys %{$objects}) {
    next if (($exec_mode ne 'default') and ($objects->{$object}->{mode} ne $exec_mode));
    my $desc = $objects->{$object}->{desc};
    print "$object.label $desc\n";    
    print "$object.type DERIVE\n";    
  };
} else {

    my %args = (-hostname   => $server,
                -version    => 1,
                -community  => $comunity);
    my ($session, $error) = Net::SNMP->session(%args);

    my $result = $session->get_request(-varbindlist => [
                                                        map {$_ =~ s/SNMPv2-SMI::mib-2\./.1.3.6.1.2.1./; $_}
                                                        map {$objects->{$_}->{mib}} keys %{$objects}
                                                       ]);
														           unless ($result) {
      my $port = 161;
      die "Can't read SNMP data from $server:$port ".$session->error;
    };

    foreach my $object (keys %{$objects}) {
      my $oid = $objects->{$object}->{mib};
      $oid =~ s/SNMPv2-SMI::mib-2\./.1.3.6.1.2.1./;
      print "$object.value ".($result->{$oid} || 0)."\n";
    };
};
